

@startuml

'12/23までに行うこと'
'Todo: geojson通りに壁を設置する'
'FIX: エージェントの動きがおかしい'
'Todo: geojson内にエージェントをランダムに設置'
'Todo: geojson内のランダムな地点へ移動'
'FIX: Pedestrianを停止するとscenarioまで停止してしまう'
'Todo: daemon,モニタ上で操作できるようにする'
'Todo: 連携するエリアの大きさプロバイダ数の自動調整'

'2/3-
'Todo: StartUp OK
'Todo: SetClock
'Todo: SetAgents
'Todo: Start

'http://plantuml.com/ja/guide'


title SynerexSimulationSequence


box "127.0.0.1" #LightBlue
participant Simulator
participant MasterProvider
control MasterSynerex
end box 

box "127.0.0.2" #LightBlue
participant WorkerProvider
control WorkerSynerex
participant Ped
participant Car
participant Vis
end box 

== StartUp ==
WorkerProvider->MasterSynerex: RegistProviderRequest
MasterSynerex->MasterProvider: RegistProviderRequest
note over MasterProvider: Workerを登録
MasterProvider->MasterSynerex: RegistProviderResponse
MasterSynerex->WorkerProvider: RegistProviderResponse
note over WorkerProvider: Masterを登録

Ped->WorkerSynerex: RegistProviderRequest
WorkerSynerex->WorkerProvider: RegistProviderRequest
note over WorkerProvider: Pedを登録
WorkerProvider->WorkerSynerex: RegistProviderResponse
WorkerSynerex->Ped: RegistProviderResponse
note over Ped: Workerを登録

Car->WorkerSynerex: RegistProviderRequest
WorkerSynerex->WorkerProvider: RegistProviderRequest
note over WorkerProvider: Carを登録
WorkerProvider->WorkerSynerex: RegistProviderResponse
WorkerSynerex->Car: RegistProviderResponse
note over Car: Workerを登録

Vis->WorkerSynerex: RegistProviderRequest
WorkerSynerex->WorkerProvider: RegistProviderRequest
note over WorkerProvider: Visを登録
WorkerProvider->WorkerSynerex: RegistProviderResponse
WorkerSynerex->Vis: RegistProviderResponse
note over Vis: Workerを登録


== SetClock ==
Simulator->MasterProvider: SetClockRequest
note over MasterProvider: Clockを登録
MasterProvider->Simulator: SetClockResponse

== SetAgent ==
Simulator->MasterProvider: SetAgentRequest
MasterProvider->MasterSynerex: SetAgentRequest
MasterSynerex->WorkerProvider: SetAgentRequest

note over WorkerProvider: 同期開始
WorkerProvider->WorkerSynerex: SetAgentRequest
WorkerSynerex->Ped: SetAgentRequest
WorkerSynerex->Car: SetAgentRequest
note over Ped: Agentを登録
note over Car: Agentを登録
Ped->WorkerSynerex: SetAgentResponse
Car->WorkerSynerex: SetAgentResponse
WorkerSynerex->WorkerProvider: SetAgentResponse
WorkerSynerex->WorkerProvider: SetAgentResponse
note over WorkerProvider: 同期終了

WorkerProvider->MasterSynerex: SetAgentResponse
MasterSynerex->MasterProvider: SetAgentResponse
MasterProvider->Simulator: SetAgentResponse

== Start ==
Simulator->MasterProvider: StartClockRequest
MasterProvider->Simulator: StartClockResponse

note over MasterProvider: サイクル開始
MasterProvider->MasterSynerex: ForwardClockRequest
MasterSynerex->WorkerProvider: ForwardClockRequest

note over WorkerProvider: 同期開始(初期化)
WorkerProvider->WorkerSynerex: ForwardClockRequest
WorkerSynerex->Ped: ForwardClockRequest
WorkerSynerex->Car: ForwardClockRequest
WorkerSynerex->Vis: ForwardClockRequest
note over Ped: なんらかの初期化処理
note over Car: なんらかの初期化処理
Ped->WorkerSynerex: ForwardClockResponse
Car->WorkerSynerex: ForwardClockResponse
Vis->WorkerSynerex: ForwardClockResponse
WorkerSynerex->WorkerProvider: ForwardClockResponse
WorkerSynerex->WorkerProvider: ForwardClockResponse
WorkerSynerex->WorkerProvider: ForwardClockResponse
note over WorkerProvider: 同期終了

note over WorkerProvider: 同期開始
WorkerProvider->WorkerSynerex: ForwardClockRequest
WorkerSynerex->Ped: ForwardClockRequest
WorkerSynerex->Car: ForwardClockRequest
WorkerSynerex->Vis: ForwardClockRequest
note over Ped: サイクルを進める
note over Car: サイクルを進める
Ped->WorkerSynerex: ForwardClockResponse
Car->WorkerSynerex: ForwardClockResponse
Vis->WorkerSynerex: ForwardClockResponse
WorkerSynerex->WorkerProvider: ForwardClockResponse
WorkerSynerex->WorkerProvider: ForwardClockResponse
WorkerSynerex->WorkerProvider: ForwardClockResponse
note over WorkerProvider: 同期終了


WorkerProvider->MasterSynerex: ForwardClockResponse
MasterSynerex->MasterProvider: ForwardClockResponse
note over MasterProvider: 次のサイクルへ

== Stop ==
Simulator->MasterProvider: StopClockRequest
note over MasterProvider: Clockを停止
MasterProvider->Simulator: StopClockResponse

== Agent Calc Flow ==

note over WorkerProvider: 同期開始
WorkerProvider->WorkerSynerex: ForwardClockRequest
WorkerSynerex->Ped: ForwardClockRequest
WorkerSynerex->Car: ForwardClockRequest

note over Ped: 同じエリアにエージェントを送る
Ped->Car: SetAgentRequest
note over Car: 同じエリアにエージェントを送る
Car->Ped: SetAgentRequest
note over Ped: 取得, 計算
note over Car: 取得, 計算
note over Ped: 隣接エリアにエージェントを送る
Ped->Car: SetAgentRequest
note over Car: 隣接エリアにエージェントを送る
Car->Ped: SetAgentRequest
note over Ped: 取得, 更新
note over Car: 取得, 更新

Ped->WorkerSynerex: ForwardClockResponse
Car->WorkerSynerex: ForwardClockResponse
WorkerSynerex->WorkerProvider: ForwardClockResponse
WorkerSynerex->WorkerProvider: ForwardClockResponse
note over WorkerProvider: 同期終了

@enduml

'必要なPubsub'
'RegistProviderRequest'
'RegistProviderResponse'
'SetClockRequest'
'SetClockResponse'
'SetAgentRequest'
'SetAgentResponse'
'StartClockRequest'
'StartClockResponse'
'ForwardClockRequest'
'ForwardClockRequest'
'StopClockRequest'
'StopClockResponse'