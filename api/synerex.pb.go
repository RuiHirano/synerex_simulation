// Code generated by protoc-gen-go. DO NOT EDIT.
// source: synerex.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	adservice "github.com/synerex/synerex_alpha/api/adservice"
	agent "github.com/synerex/synerex_alpha/api/agent"
	area "github.com/synerex/synerex_alpha/api/area"
	clock "github.com/synerex/synerex_alpha/api/clock"
	fleet "github.com/synerex/synerex_alpha/api/fleet"
	library "github.com/synerex/synerex_alpha/api/library"
	marketing "github.com/synerex/synerex_alpha/api/marketing"
	ptransit "github.com/synerex/synerex_alpha/api/ptransit"
	rideshare "github.com/synerex/synerex_alpha/api/rideshare"
	routing "github.com/synerex/synerex_alpha/api/routing"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChannelType int32

const (
	ChannelType_NONE              ChannelType = 0
	ChannelType_RIDE_SHARE        ChannelType = 1
	ChannelType_AD_SERVICE        ChannelType = 2
	ChannelType_LIB_SERVICE       ChannelType = 3
	ChannelType_PT_SERVICE        ChannelType = 4
	ChannelType_ROUTING_SERVICE   ChannelType = 5
	ChannelType_MARKETING_SERVICE ChannelType = 6
	ChannelType_CLOCK_SERVICE     ChannelType = 7
	ChannelType_AREA_SERVICE      ChannelType = 8
	ChannelType_AGENT_SERVICE     ChannelType = 9
	ChannelType_END               ChannelType = 10
)

var ChannelType_name = map[int32]string{
	0:  "NONE",
	1:  "RIDE_SHARE",
	2:  "AD_SERVICE",
	3:  "LIB_SERVICE",
	4:  "PT_SERVICE",
	5:  "ROUTING_SERVICE",
	6:  "MARKETING_SERVICE",
	7:  "CLOCK_SERVICE",
	8:  "AREA_SERVICE",
	9:  "AGENT_SERVICE",
	10: "END",
}

var ChannelType_value = map[string]int32{
	"NONE":              0,
	"RIDE_SHARE":        1,
	"AD_SERVICE":        2,
	"LIB_SERVICE":       3,
	"PT_SERVICE":        4,
	"ROUTING_SERVICE":   5,
	"MARKETING_SERVICE": 6,
	"CLOCK_SERVICE":     7,
	"AREA_SERVICE":      8,
	"AGENT_SERVICE":     9,
	"END":               10,
}

func (x ChannelType) String() string {
	return proto.EnumName(ChannelType_name, int32(x))
}

func (ChannelType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{0}
}

type Response struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{0}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Response) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ConfirmResponse struct {
	Ok                   bool               `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	MbusId               uint64             `protobuf:"fixed64,2,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	Wait                 *duration.Duration `protobuf:"bytes,3,opt,name=wait,proto3" json:"wait,omitempty"`
	Err                  string             `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ConfirmResponse) Reset()         { *m = ConfirmResponse{} }
func (m *ConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmResponse) ProtoMessage()    {}
func (*ConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{1}
}

func (m *ConfirmResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfirmResponse.Unmarshal(m, b)
}
func (m *ConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfirmResponse.Marshal(b, m, deterministic)
}
func (m *ConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmResponse.Merge(m, src)
}
func (m *ConfirmResponse) XXX_Size() int {
	return xxx_messageInfo_ConfirmResponse.Size(m)
}
func (m *ConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmResponse proto.InternalMessageInfo

func (m *ConfirmResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ConfirmResponse) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

func (m *ConfirmResponse) GetWait() *duration.Duration {
	if m != nil {
		return m.Wait
	}
	return nil
}

func (m *ConfirmResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type Supply struct {
	Id         uint64               `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId   uint64               `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId   uint64               `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Type       ChannelType          `protobuf:"varint,4,opt,name=type,proto3,enum=api.ChannelType" json:"type,omitempty"`
	SupplyName string               `protobuf:"bytes,5,opt,name=supply_name,json=supplyName,proto3" json:"supply_name,omitempty"`
	Ts         *timestamp.Timestamp `protobuf:"bytes,6,opt,name=ts,proto3" json:"ts,omitempty"`
	//message content = 7; // json
	ArgJson string `protobuf:"bytes,7,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	MbusId  uint64 `protobuf:"fixed64,8,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	// Types that are valid to be assigned to ArgOneof:
	//	*Supply_Arg_Fleet
	//	*Supply_Arg_RideShare
	//	*Supply_Arg_AdService
	//	*Supply_Arg_LibService
	//	*Supply_Arg_PTService
	//	*Supply_Arg_RoutingService
	//	*Supply_Arg_MarketingService
	//	*Supply_Arg_PTgtfs
	//	*Supply_Arg_ClockService
	//	*Supply_Arg_AreaService
	//	*Supply_Arg_AgentService
	ArgOneof             isSupply_ArgOneof `protobuf_oneof:"arg_oneof"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Supply) Reset()         { *m = Supply{} }
func (m *Supply) String() string { return proto.CompactTextString(m) }
func (*Supply) ProtoMessage()    {}
func (*Supply) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{2}
}

func (m *Supply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Supply.Unmarshal(m, b)
}
func (m *Supply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Supply.Marshal(b, m, deterministic)
}
func (m *Supply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Supply.Merge(m, src)
}
func (m *Supply) XXX_Size() int {
	return xxx_messageInfo_Supply.Size(m)
}
func (m *Supply) XXX_DiscardUnknown() {
	xxx_messageInfo_Supply.DiscardUnknown(m)
}

var xxx_messageInfo_Supply proto.InternalMessageInfo

func (m *Supply) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Supply) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *Supply) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Supply) GetType() ChannelType {
	if m != nil {
		return m.Type
	}
	return ChannelType_NONE
}

func (m *Supply) GetSupplyName() string {
	if m != nil {
		return m.SupplyName
	}
	return ""
}

func (m *Supply) GetTs() *timestamp.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *Supply) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

func (m *Supply) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

type isSupply_ArgOneof interface {
	isSupply_ArgOneof()
}

type Supply_Arg_Fleet struct {
	Arg_Fleet *fleet.Fleet `protobuf:"bytes,10,opt,name=arg_Fleet,json=argFleet,proto3,oneof"`
}

type Supply_Arg_RideShare struct {
	Arg_RideShare *rideshare.RideShare `protobuf:"bytes,11,opt,name=arg_RideShare,json=argRideShare,proto3,oneof"`
}

type Supply_Arg_AdService struct {
	Arg_AdService *adservice.AdService `protobuf:"bytes,12,opt,name=arg_AdService,json=argAdService,proto3,oneof"`
}

type Supply_Arg_LibService struct {
	Arg_LibService *library.LibService `protobuf:"bytes,13,opt,name=arg_LibService,json=argLibService,proto3,oneof"`
}

type Supply_Arg_PTService struct {
	Arg_PTService *ptransit.PTService `protobuf:"bytes,14,opt,name=arg_PTService,json=argPTService,proto3,oneof"`
}

type Supply_Arg_RoutingService struct {
	Arg_RoutingService *routing.RoutingService `protobuf:"bytes,15,opt,name=arg_RoutingService,json=argRoutingService,proto3,oneof"`
}

type Supply_Arg_MarketingService struct {
	Arg_MarketingService *marketing.MarketingService `protobuf:"bytes,16,opt,name=arg_MarketingService,json=argMarketingService,proto3,oneof"`
}

type Supply_Arg_PTgtfs struct {
	Arg_PTgtfs *ptransit.PTgtfs `protobuf:"bytes,17,opt,name=arg_PTgtfs,json=argPTgtfs,proto3,oneof"`
}

type Supply_Arg_ClockService struct {
	Arg_ClockService *clock.ClockService `protobuf:"bytes,18,opt,name=arg_ClockService,json=argClockService,proto3,oneof"`
}

type Supply_Arg_AreaService struct {
	Arg_AreaService *area.AreaService `protobuf:"bytes,19,opt,name=arg_AreaService,json=argAreaService,proto3,oneof"`
}

type Supply_Arg_AgentService struct {
	Arg_AgentService *agent.AgentService `protobuf:"bytes,20,opt,name=arg_AgentService,json=argAgentService,proto3,oneof"`
}

func (*Supply_Arg_Fleet) isSupply_ArgOneof() {}

func (*Supply_Arg_RideShare) isSupply_ArgOneof() {}

func (*Supply_Arg_AdService) isSupply_ArgOneof() {}

func (*Supply_Arg_LibService) isSupply_ArgOneof() {}

func (*Supply_Arg_PTService) isSupply_ArgOneof() {}

func (*Supply_Arg_RoutingService) isSupply_ArgOneof() {}

func (*Supply_Arg_MarketingService) isSupply_ArgOneof() {}

func (*Supply_Arg_PTgtfs) isSupply_ArgOneof() {}

func (*Supply_Arg_ClockService) isSupply_ArgOneof() {}

func (*Supply_Arg_AreaService) isSupply_ArgOneof() {}

func (*Supply_Arg_AgentService) isSupply_ArgOneof() {}

func (m *Supply) GetArgOneof() isSupply_ArgOneof {
	if m != nil {
		return m.ArgOneof
	}
	return nil
}

func (m *Supply) GetArg_Fleet() *fleet.Fleet {
	if x, ok := m.GetArgOneof().(*Supply_Arg_Fleet); ok {
		return x.Arg_Fleet
	}
	return nil
}

func (m *Supply) GetArg_RideShare() *rideshare.RideShare {
	if x, ok := m.GetArgOneof().(*Supply_Arg_RideShare); ok {
		return x.Arg_RideShare
	}
	return nil
}

func (m *Supply) GetArg_AdService() *adservice.AdService {
	if x, ok := m.GetArgOneof().(*Supply_Arg_AdService); ok {
		return x.Arg_AdService
	}
	return nil
}

func (m *Supply) GetArg_LibService() *library.LibService {
	if x, ok := m.GetArgOneof().(*Supply_Arg_LibService); ok {
		return x.Arg_LibService
	}
	return nil
}

func (m *Supply) GetArg_PTService() *ptransit.PTService {
	if x, ok := m.GetArgOneof().(*Supply_Arg_PTService); ok {
		return x.Arg_PTService
	}
	return nil
}

func (m *Supply) GetArg_RoutingService() *routing.RoutingService {
	if x, ok := m.GetArgOneof().(*Supply_Arg_RoutingService); ok {
		return x.Arg_RoutingService
	}
	return nil
}

func (m *Supply) GetArg_MarketingService() *marketing.MarketingService {
	if x, ok := m.GetArgOneof().(*Supply_Arg_MarketingService); ok {
		return x.Arg_MarketingService
	}
	return nil
}

func (m *Supply) GetArg_PTgtfs() *ptransit.PTgtfs {
	if x, ok := m.GetArgOneof().(*Supply_Arg_PTgtfs); ok {
		return x.Arg_PTgtfs
	}
	return nil
}

func (m *Supply) GetArg_ClockService() *clock.ClockService {
	if x, ok := m.GetArgOneof().(*Supply_Arg_ClockService); ok {
		return x.Arg_ClockService
	}
	return nil
}

func (m *Supply) GetArg_AreaService() *area.AreaService {
	if x, ok := m.GetArgOneof().(*Supply_Arg_AreaService); ok {
		return x.Arg_AreaService
	}
	return nil
}

func (m *Supply) GetArg_AgentService() *agent.AgentService {
	if x, ok := m.GetArgOneof().(*Supply_Arg_AgentService); ok {
		return x.Arg_AgentService
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Supply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Supply_Arg_Fleet)(nil),
		(*Supply_Arg_RideShare)(nil),
		(*Supply_Arg_AdService)(nil),
		(*Supply_Arg_LibService)(nil),
		(*Supply_Arg_PTService)(nil),
		(*Supply_Arg_RoutingService)(nil),
		(*Supply_Arg_MarketingService)(nil),
		(*Supply_Arg_PTgtfs)(nil),
		(*Supply_Arg_ClockService)(nil),
		(*Supply_Arg_AreaService)(nil),
		(*Supply_Arg_AgentService)(nil),
	}
}

type Demand struct {
	Id         uint64               `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId   uint64               `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId   uint64               `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Type       ChannelType          `protobuf:"varint,4,opt,name=type,proto3,enum=api.ChannelType" json:"type,omitempty"`
	DemandName string               `protobuf:"bytes,5,opt,name=demand_name,json=demandName,proto3" json:"demand_name,omitempty"`
	Ts         *timestamp.Timestamp `protobuf:"bytes,6,opt,name=ts,proto3" json:"ts,omitempty"`
	//message content = 7; // json
	ArgJson string `protobuf:"bytes,7,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	MbusId  uint64 `protobuf:"fixed64,8,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	// Types that are valid to be assigned to ArgOneof:
	//	*Demand_Arg_Fleet
	//	*Demand_Arg_RideShare
	//	*Demand_Arg_AdService
	//	*Demand_Arg_LibService
	//	*Demand_Arg_PTService
	//	*Demand_Arg_RoutingService
	//	*Demand_Arg_MarketingService
	//	*Demand_Arg_PTgtfs
	//	*Demand_Arg_ClockService
	//	*Demand_Arg_AreaService
	//	*Demand_Arg_AgentService
	ArgOneof             isDemand_ArgOneof `protobuf_oneof:"arg_oneof"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Demand) Reset()         { *m = Demand{} }
func (m *Demand) String() string { return proto.CompactTextString(m) }
func (*Demand) ProtoMessage()    {}
func (*Demand) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{3}
}

func (m *Demand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Demand.Unmarshal(m, b)
}
func (m *Demand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Demand.Marshal(b, m, deterministic)
}
func (m *Demand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Demand.Merge(m, src)
}
func (m *Demand) XXX_Size() int {
	return xxx_messageInfo_Demand.Size(m)
}
func (m *Demand) XXX_DiscardUnknown() {
	xxx_messageInfo_Demand.DiscardUnknown(m)
}

var xxx_messageInfo_Demand proto.InternalMessageInfo

func (m *Demand) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Demand) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *Demand) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Demand) GetType() ChannelType {
	if m != nil {
		return m.Type
	}
	return ChannelType_NONE
}

func (m *Demand) GetDemandName() string {
	if m != nil {
		return m.DemandName
	}
	return ""
}

func (m *Demand) GetTs() *timestamp.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *Demand) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

func (m *Demand) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

type isDemand_ArgOneof interface {
	isDemand_ArgOneof()
}

type Demand_Arg_Fleet struct {
	Arg_Fleet *fleet.Fleet `protobuf:"bytes,10,opt,name=arg_Fleet,json=argFleet,proto3,oneof"`
}

type Demand_Arg_RideShare struct {
	Arg_RideShare *rideshare.RideShare `protobuf:"bytes,11,opt,name=arg_RideShare,json=argRideShare,proto3,oneof"`
}

type Demand_Arg_AdService struct {
	Arg_AdService *adservice.AdService `protobuf:"bytes,12,opt,name=arg_AdService,json=argAdService,proto3,oneof"`
}

type Demand_Arg_LibService struct {
	Arg_LibService *library.LibService `protobuf:"bytes,13,opt,name=arg_LibService,json=argLibService,proto3,oneof"`
}

type Demand_Arg_PTService struct {
	Arg_PTService *ptransit.PTService `protobuf:"bytes,14,opt,name=arg_PTService,json=argPTService,proto3,oneof"`
}

type Demand_Arg_RoutingService struct {
	Arg_RoutingService *routing.RoutingService `protobuf:"bytes,15,opt,name=arg_RoutingService,json=argRoutingService,proto3,oneof"`
}

type Demand_Arg_MarketingService struct {
	Arg_MarketingService *marketing.MarketingService `protobuf:"bytes,16,opt,name=arg_MarketingService,json=argMarketingService,proto3,oneof"`
}

type Demand_Arg_PTgtfs struct {
	Arg_PTgtfs *ptransit.PTgtfs `protobuf:"bytes,17,opt,name=arg_PTgtfs,json=argPTgtfs,proto3,oneof"`
}

type Demand_Arg_ClockService struct {
	Arg_ClockService *clock.ClockService `protobuf:"bytes,18,opt,name=arg_ClockService,json=argClockService,proto3,oneof"`
}

type Demand_Arg_AreaService struct {
	Arg_AreaService *area.AreaService `protobuf:"bytes,19,opt,name=arg_AreaService,json=argAreaService,proto3,oneof"`
}

type Demand_Arg_AgentService struct {
	Arg_AgentService *agent.AgentService `protobuf:"bytes,20,opt,name=arg_AgentService,json=argAgentService,proto3,oneof"`
}

func (*Demand_Arg_Fleet) isDemand_ArgOneof() {}

func (*Demand_Arg_RideShare) isDemand_ArgOneof() {}

func (*Demand_Arg_AdService) isDemand_ArgOneof() {}

func (*Demand_Arg_LibService) isDemand_ArgOneof() {}

func (*Demand_Arg_PTService) isDemand_ArgOneof() {}

func (*Demand_Arg_RoutingService) isDemand_ArgOneof() {}

func (*Demand_Arg_MarketingService) isDemand_ArgOneof() {}

func (*Demand_Arg_PTgtfs) isDemand_ArgOneof() {}

func (*Demand_Arg_ClockService) isDemand_ArgOneof() {}

func (*Demand_Arg_AreaService) isDemand_ArgOneof() {}

func (*Demand_Arg_AgentService) isDemand_ArgOneof() {}

func (m *Demand) GetArgOneof() isDemand_ArgOneof {
	if m != nil {
		return m.ArgOneof
	}
	return nil
}

func (m *Demand) GetArg_Fleet() *fleet.Fleet {
	if x, ok := m.GetArgOneof().(*Demand_Arg_Fleet); ok {
		return x.Arg_Fleet
	}
	return nil
}

func (m *Demand) GetArg_RideShare() *rideshare.RideShare {
	if x, ok := m.GetArgOneof().(*Demand_Arg_RideShare); ok {
		return x.Arg_RideShare
	}
	return nil
}

func (m *Demand) GetArg_AdService() *adservice.AdService {
	if x, ok := m.GetArgOneof().(*Demand_Arg_AdService); ok {
		return x.Arg_AdService
	}
	return nil
}

func (m *Demand) GetArg_LibService() *library.LibService {
	if x, ok := m.GetArgOneof().(*Demand_Arg_LibService); ok {
		return x.Arg_LibService
	}
	return nil
}

func (m *Demand) GetArg_PTService() *ptransit.PTService {
	if x, ok := m.GetArgOneof().(*Demand_Arg_PTService); ok {
		return x.Arg_PTService
	}
	return nil
}

func (m *Demand) GetArg_RoutingService() *routing.RoutingService {
	if x, ok := m.GetArgOneof().(*Demand_Arg_RoutingService); ok {
		return x.Arg_RoutingService
	}
	return nil
}

func (m *Demand) GetArg_MarketingService() *marketing.MarketingService {
	if x, ok := m.GetArgOneof().(*Demand_Arg_MarketingService); ok {
		return x.Arg_MarketingService
	}
	return nil
}

func (m *Demand) GetArg_PTgtfs() *ptransit.PTgtfs {
	if x, ok := m.GetArgOneof().(*Demand_Arg_PTgtfs); ok {
		return x.Arg_PTgtfs
	}
	return nil
}

func (m *Demand) GetArg_ClockService() *clock.ClockService {
	if x, ok := m.GetArgOneof().(*Demand_Arg_ClockService); ok {
		return x.Arg_ClockService
	}
	return nil
}

func (m *Demand) GetArg_AreaService() *area.AreaService {
	if x, ok := m.GetArgOneof().(*Demand_Arg_AreaService); ok {
		return x.Arg_AreaService
	}
	return nil
}

func (m *Demand) GetArg_AgentService() *agent.AgentService {
	if x, ok := m.GetArgOneof().(*Demand_Arg_AgentService); ok {
		return x.Arg_AgentService
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Demand) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Demand_Arg_Fleet)(nil),
		(*Demand_Arg_RideShare)(nil),
		(*Demand_Arg_AdService)(nil),
		(*Demand_Arg_LibService)(nil),
		(*Demand_Arg_PTService)(nil),
		(*Demand_Arg_RoutingService)(nil),
		(*Demand_Arg_MarketingService)(nil),
		(*Demand_Arg_PTgtfs)(nil),
		(*Demand_Arg_ClockService)(nil),
		(*Demand_Arg_AreaService)(nil),
		(*Demand_Arg_AgentService)(nil),
	}
}

type Target struct {
	Id                   uint64             `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId             uint64             `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId             uint64             `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Type                 ChannelType        `protobuf:"varint,4,opt,name=type,proto3,enum=api.ChannelType" json:"type,omitempty"`
	Wait                 *duration.Duration `protobuf:"bytes,5,opt,name=wait,proto3" json:"wait,omitempty"`
	MbusId               uint64             `protobuf:"fixed64,6,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{4}
}

func (m *Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Target.Unmarshal(m, b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Target.Marshal(b, m, deterministic)
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return xxx_messageInfo_Target.Size(m)
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

func (m *Target) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Target) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *Target) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Target) GetType() ChannelType {
	if m != nil {
		return m.Type
	}
	return ChannelType_NONE
}

func (m *Target) GetWait() *duration.Duration {
	if m != nil {
		return m.Wait
	}
	return nil
}

func (m *Target) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

type Channel struct {
	ClientId             uint64      `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Type                 ChannelType `protobuf:"varint,2,opt,name=type,proto3,enum=api.ChannelType" json:"type,omitempty"`
	ArgJson              string      `protobuf:"bytes,3,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{5}
}

func (m *Channel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Channel.Unmarshal(m, b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
}
func (m *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(m, src)
}
func (m *Channel) XXX_Size() int {
	return xxx_messageInfo_Channel.Size(m)
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Channel) GetType() ChannelType {
	if m != nil {
		return m.Type
	}
	return ChannelType_NONE
}

func (m *Channel) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

type Mbus struct {
	ClientId             uint64   `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	MbusId               uint64   `protobuf:"fixed64,2,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	ArgJson              string   `protobuf:"bytes,3,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Mbus) Reset()         { *m = Mbus{} }
func (m *Mbus) String() string { return proto.CompactTextString(m) }
func (*Mbus) ProtoMessage()    {}
func (*Mbus) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{6}
}

func (m *Mbus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mbus.Unmarshal(m, b)
}
func (m *Mbus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mbus.Marshal(b, m, deterministic)
}
func (m *Mbus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mbus.Merge(m, src)
}
func (m *Mbus) XXX_Size() int {
	return xxx_messageInfo_Mbus.Size(m)
}
func (m *Mbus) XXX_DiscardUnknown() {
	xxx_messageInfo_Mbus.DiscardUnknown(m)
}

var xxx_messageInfo_Mbus proto.InternalMessageInfo

func (m *Mbus) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Mbus) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

func (m *Mbus) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

type MbusMsg struct {
	MsgId                uint64   `protobuf:"fixed64,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	SenderId             uint64   `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId             uint64   `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	MbusId               uint64   `protobuf:"fixed64,4,opt,name=mbus_id,json=mbusId,proto3" json:"mbus_id,omitempty"`
	MsgType              uint32   `protobuf:"varint,5,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
	MsgInfo              string   `protobuf:"bytes,6,opt,name=msg_info,json=msgInfo,proto3" json:"msg_info,omitempty"`
	ArgJson              string   `protobuf:"bytes,7,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MbusMsg) Reset()         { *m = MbusMsg{} }
func (m *MbusMsg) String() string { return proto.CompactTextString(m) }
func (*MbusMsg) ProtoMessage()    {}
func (*MbusMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_64312b9648bb40d3, []int{7}
}

func (m *MbusMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MbusMsg.Unmarshal(m, b)
}
func (m *MbusMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MbusMsg.Marshal(b, m, deterministic)
}
func (m *MbusMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MbusMsg.Merge(m, src)
}
func (m *MbusMsg) XXX_Size() int {
	return xxx_messageInfo_MbusMsg.Size(m)
}
func (m *MbusMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_MbusMsg.DiscardUnknown(m)
}

var xxx_messageInfo_MbusMsg proto.InternalMessageInfo

func (m *MbusMsg) GetMsgId() uint64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *MbusMsg) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *MbusMsg) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *MbusMsg) GetMbusId() uint64 {
	if m != nil {
		return m.MbusId
	}
	return 0
}

func (m *MbusMsg) GetMsgType() uint32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *MbusMsg) GetMsgInfo() string {
	if m != nil {
		return m.MsgInfo
	}
	return ""
}

func (m *MbusMsg) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

func init() {
	proto.RegisterEnum("api.ChannelType", ChannelType_name, ChannelType_value)
	proto.RegisterType((*Response)(nil), "api.Response")
	proto.RegisterType((*ConfirmResponse)(nil), "api.ConfirmResponse")
	proto.RegisterType((*Supply)(nil), "api.Supply")
	proto.RegisterType((*Demand)(nil), "api.Demand")
	proto.RegisterType((*Target)(nil), "api.Target")
	proto.RegisterType((*Channel)(nil), "api.Channel")
	proto.RegisterType((*Mbus)(nil), "api.Mbus")
	proto.RegisterType((*MbusMsg)(nil), "api.MbusMsg")
}

func init() { proto.RegisterFile("synerex.proto", fileDescriptor_64312b9648bb40d3) }

var fileDescriptor_64312b9648bb40d3 = []byte{
	// 1153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xf6, 0xbf, 0xec, 0xe3, 0xdf, 0x30, 0x09, 0xe2, 0xb8, 0xc0, 0x12, 0x18, 0x03, 0x1a, 0x14,
	0xad, 0x55, 0xa4, 0xdb, 0xed, 0x56, 0xc7, 0xf6, 0x6a, 0xaf, 0x89, 0x13, 0xd0, 0xde, 0x06, 0xec,
	0x26, 0xa0, 0x2d, 0x5a, 0xd5, 0x62, 0x4b, 0x02, 0x29, 0x6f, 0x0b, 0xf6, 0x48, 0x7b, 0x89, 0x5d,
	0x6c, 0x6f, 0xb2, 0x07, 0x19, 0x48, 0x8a, 0xb2, 0xe4, 0xac, 0x59, 0x8a, 0x0d, 0xeb, 0x4d, 0x6e,
	0x64, 0xf2, 0x3b, 0xe7, 0x7c, 0xe7, 0xf0, 0x88, 0x1f, 0x4d, 0x41, 0x95, 0xdf, 0xba, 0x94, 0xd1,
	0x9f, 0x3b, 0x3e, 0xf3, 0x02, 0x0f, 0x65, 0x89, 0xef, 0xb4, 0x8e, 0x6c, 0xcf, 0xb3, 0x97, 0xd4,
	0x94, 0xd0, 0x6c, 0xbd, 0x30, 0x03, 0x67, 0x45, 0x79, 0x40, 0x56, 0xbe, 0xf2, 0x6a, 0x7d, 0xb2,
	0xed, 0x60, 0xad, 0x19, 0x09, 0x1c, 0xcf, 0x0d, 0xed, 0x3b, 0x8b, 0x25, 0xa5, 0x81, 0x29, 0x9f,
	0x21, 0x74, 0xc8, 0x1c, 0x8b, 0xf2, 0x77, 0x84, 0x51, 0x33, 0x1a, 0x69, 0x13, 0xb1, 0x38, 0x65,
	0x3f, 0x3a, 0x73, 0x6a, 0x46, 0xa3, 0xd0, 0xb4, 0xbf, 0x74, 0x66, 0x8c, 0xb0, 0x5b, 0x33, 0xfc,
	0x0d, 0xe1, 0x03, 0x3f, 0x60, 0xc4, 0xe5, 0x4e, 0x60, 0xea, 0x81, 0xf6, 0x67, 0xde, 0x3a, 0x70,
	0x5c, 0xdb, 0x0c, 0x7f, 0x75, 0x86, 0x15, 0x61, 0x37, 0x54, 0x1a, 0xa2, 0x51, 0x68, 0xaa, 0x13,
	0x46, 0x89, 0x29, 0x1e, 0xba, 0x76, 0x62, 0x53, 0x37, 0x30, 0xe5, 0x53, 0x43, 0xf3, 0xa5, 0x37,
	0xbf, 0x31, 0xe5, 0x53, 0x41, 0xed, 0xe7, 0x50, 0xc4, 0x94, 0xfb, 0x9e, 0xcb, 0x29, 0xaa, 0x41,
	0xc6, 0xbb, 0x69, 0xa6, 0x8f, 0xd3, 0x27, 0x45, 0x9c, 0xf1, 0x6e, 0x50, 0x03, 0xb2, 0x94, 0xb1,
	0x66, 0xe6, 0x38, 0x7d, 0x52, 0xc2, 0x62, 0xd8, 0xfe, 0x05, 0xea, 0x3d, 0xcf, 0x5d, 0x38, 0x6c,
	0xf5, 0xde, 0xa0, 0x03, 0x30, 0x56, 0xb3, 0x35, 0xbf, 0x76, 0x2c, 0x19, 0x58, 0xc0, 0x05, 0x31,
	0x1d, 0x59, 0xe8, 0x05, 0xe4, 0x7e, 0x22, 0x4e, 0xd0, 0xcc, 0x1e, 0xa7, 0x4f, 0xca, 0xa7, 0x87,
	0x1d, 0xd5, 0xfa, 0x8e, 0x6e, 0x7d, 0xa7, 0x1f, 0xb6, 0x1e, 0x4b, 0x37, 0x9d, 0x3c, 0xb7, 0x49,
	0xfe, 0xa7, 0x01, 0x85, 0xc9, 0xda, 0xf7, 0x97, 0xb7, 0x22, 0xa9, 0x63, 0xc9, 0xa4, 0x05, 0x9c,
	0x71, 0x2c, 0xf4, 0x04, 0x4a, 0x9c, 0xba, 0x16, 0x65, 0x9b, 0xb4, 0x45, 0x05, 0x8c, 0xa4, 0x31,
	0x20, 0xcc, 0xa6, 0x81, 0x30, 0x66, 0x95, 0x51, 0x01, 0x23, 0x0b, 0x7d, 0x0a, 0xb9, 0xe0, 0xd6,
	0xa7, 0x32, 0x4f, 0xed, 0xb4, 0xd1, 0x21, 0xbe, 0xd3, 0xe9, 0xbd, 0x23, 0xae, 0x4b, 0x97, 0xd3,
	0x5b, 0x9f, 0x62, 0x69, 0x45, 0x47, 0x50, 0xe6, 0x32, 0xf3, 0xb5, 0x4b, 0x56, 0xb4, 0x99, 0x97,
	0x45, 0x81, 0x82, 0xc6, 0x64, 0x45, 0xd1, 0x33, 0xc8, 0x04, 0xbc, 0x59, 0x90, 0x4b, 0x6b, 0xdd,
	0x59, 0xda, 0x54, 0x6f, 0x3b, 0x9c, 0x09, 0x38, 0x3a, 0x84, 0x22, 0x61, 0xf6, 0xf5, 0x0f, 0xdc,
	0x73, 0x9b, 0x86, 0x64, 0x32, 0x08, 0xb3, 0xbf, 0xe6, 0x9e, 0x1b, 0x6f, 0x5e, 0x31, 0xd1, 0x3c,
	0x13, 0x4a, 0x22, 0xe6, 0x2b, 0xb1, 0x11, 0x9b, 0x20, 0xd3, 0xa8, 0x5a, 0xd5, 0xd6, 0x94, 0xf8,
	0x30, 0x85, 0x05, 0xb1, 0x1c, 0xa3, 0x2f, 0xa1, 0x2a, 0x02, 0xb0, 0x63, 0xd1, 0x89, 0xd8, 0xa2,
	0xcd, 0xb2, 0x0c, 0x6a, 0xca, 0xa0, 0xcd, 0xc6, 0x8d, 0xec, 0xc3, 0x14, 0xae, 0x10, 0x66, 0x47,
	0x73, 0x4d, 0xd0, 0xb5, 0x26, 0x6a, 0x23, 0x37, 0x2b, 0x31, 0x82, 0xcd, 0xf6, 0x8e, 0xec, 0x21,
	0x41, 0x34, 0x47, 0xaf, 0xa1, 0x26, 0x08, 0xce, 0x9d, 0x99, 0x66, 0xa8, 0x4a, 0x86, 0x03, 0xc9,
	0xa0, 0x75, 0xb0, 0x31, 0x0f, 0x53, 0x58, 0x64, 0xdc, 0x00, 0xe8, 0x0b, 0x55, 0xc2, 0xd5, 0x54,
	0x13, 0xd4, 0x62, 0x04, 0x91, 0x60, 0x22, 0x73, 0x58, 0x41, 0x34, 0x47, 0xe7, 0x80, 0x64, 0x0f,
	0x94, 0x84, 0x34, 0x49, 0x5d, 0x92, 0x3c, 0x51, 0x8d, 0x08, 0xd5, 0x95, 0x74, 0x19, 0xa6, 0xf0,
	0x8e, 0xe8, 0x45, 0x02, 0x44, 0x53, 0xd8, 0x13, 0x6c, 0x17, 0x5a, 0x77, 0x9a, 0xaf, 0x21, 0xf9,
	0x8e, 0x24, 0xdf, 0x46, 0x94, 0xdb, 0x6e, 0xc3, 0x14, 0xde, 0x25, 0xcc, 0xde, 0x86, 0xd1, 0xe7,
	0x00, 0x6a, 0x8d, 0x76, 0xb0, 0xe0, 0xcd, 0x1d, 0xc9, 0xb5, 0xb7, 0xbd, 0x40, 0x61, 0x1b, 0xa6,
	0x70, 0x49, 0xae, 0x4e, 0x4c, 0x50, 0x1f, 0x1a, 0x22, 0xac, 0x27, 0x94, 0xac, 0x0b, 0x41, 0xb1,
	0xee, 0x28, 0x89, 0xc7, 0xcd, 0xc3, 0x14, 0xae, 0x13, 0x66, 0xc7, 0x21, 0xf4, 0x1a, 0xea, 0xf2,
	0x1d, 0x33, 0x4a, 0x34, 0xc9, 0xae, 0x24, 0xd9, 0x57, 0x6f, 0x59, 0x1c, 0x26, 0x31, 0xe3, 0x30,
	0x85, 0xc5, 0x2b, 0x8d, 0x21, 0xba, 0x8e, 0xae, 0x38, 0x64, 0x34, 0xc5, 0x5e, 0xac, 0x0e, 0x75,
	0xfa, 0xc4, 0xcd, 0x61, 0x1d, 0x71, 0xe8, 0xac, 0xac, 0x76, 0xb7, 0xe7, 0x52, 0x6f, 0x21, 0x65,
	0xde, 0xa7, 0x2b, 0xe2, 0x5a, 0x1f, 0x43, 0xe6, 0x96, 0xcc, 0x9c, 0x90, 0xb9, 0x82, 0x1e, 0x65,
	0xfe, 0x28, 0xf3, 0x47, 0x99, 0xff, 0x77, 0x32, 0xff, 0x2d, 0x0d, 0x85, 0xa9, 0x94, 0xe7, 0xff,
	0x2e, 0x73, 0x7d, 0x13, 0xc9, 0x3f, 0xec, 0x26, 0x12, 0x53, 0x6b, 0x21, 0xae, 0xd6, 0xb6, 0x0d,
	0x46, 0x48, 0x2e, 0xaa, 0x9a, 0x2f, 0x1d, 0xea, 0xca, 0xaa, 0xd4, 0x4a, 0x8a, 0x0a, 0x88, 0x55,
	0x95, 0xb9, 0xb7, 0xaa, 0xf8, 0x79, 0x91, 0x4d, 0x9c, 0x17, 0xed, 0xef, 0x20, 0x77, 0x31, 0x5b,
	0xf3, 0xfb, 0xb3, 0xbc, 0xf7, 0xe2, 0x75, 0x0f, 0xf1, 0xef, 0x69, 0x30, 0x04, 0xf3, 0x05, 0xb7,
	0xd1, 0x3e, 0x14, 0x56, 0xdc, 0xde, 0x30, 0xe7, 0x57, 0xdc, 0x1e, 0xfd, 0x9b, 0x97, 0x11, 0x2b,
	0x28, 0xb7, 0x5d, 0x90, 0xc8, 0x24, 0x7b, 0x22, 0xde, 0x41, 0x15, 0x1b, 0x2b, 0x6e, 0x4f, 0xc3,
	0x26, 0xc8, 0x22, 0xdc, 0x85, 0x27, 0x9b, 0x5d, 0x92, 0xa6, 0x91, 0xbb, 0xf0, 0xee, 0x39, 0x4f,
	0x9f, 0xfd, 0x91, 0x86, 0x72, 0xac, 0xa1, 0xa8, 0x08, 0xb9, 0xf1, 0xe5, 0x78, 0xd0, 0x48, 0xa1,
	0x1a, 0x00, 0x1e, 0xf5, 0x07, 0xd7, 0x93, 0x61, 0x17, 0x0f, 0x1a, 0x69, 0x31, 0xef, 0xf6, 0xaf,
	0x27, 0x03, 0xfc, 0xed, 0xa8, 0x37, 0x68, 0x64, 0x50, 0x1d, 0xca, 0xe7, 0xa3, 0xb3, 0x08, 0xc8,
	0x0a, 0x87, 0xab, 0x69, 0x34, 0xcf, 0xa1, 0x5d, 0xa8, 0xe3, 0xcb, 0x6f, 0xa6, 0xa3, 0xf1, 0x9b,
	0x08, 0xcc, 0xa3, 0x7d, 0xd8, 0xb9, 0xe8, 0xe2, 0xb7, 0x83, 0x04, 0x5c, 0x40, 0x3b, 0x50, 0xed,
	0x9d, 0x5f, 0xf6, 0xde, 0x46, 0x90, 0x81, 0x1a, 0x50, 0xe9, 0xe2, 0x41, 0x37, 0x42, 0x8a, 0xc2,
	0xa9, 0xfb, 0x66, 0x30, 0xde, 0xe4, 0x28, 0x21, 0x03, 0xb2, 0x83, 0x71, 0xbf, 0x01, 0xa7, 0xbf,
	0xe6, 0xc1, 0x98, 0xa8, 0xcf, 0x18, 0xd4, 0x81, 0x1a, 0xa6, 0xb6, 0xc3, 0x03, 0xca, 0xc2, 0x7f,
	0xc3, 0xb2, 0xdc, 0x38, 0x6a, 0xd2, 0xaa, 0xca, 0x89, 0xbe, 0x85, 0xb7, 0x53, 0x71, 0xff, 0xf0,
	0x92, 0xac, 0xfc, 0xd5, 0xe4, 0xae, 0xff, 0x0b, 0xa8, 0x5e, 0x31, 0xcf, 0xf7, 0x38, 0x7d, 0x10,
	0xfd, 0xc6, 0xfd, 0x41, 0xec, 0x9f, 0x41, 0x15, 0x53, 0xf1, 0xe7, 0x91, 0x74, 0x57, 0x82, 0x6f,
	0xa9, 0x93, 0x6f, 0xeb, 0x4b, 0x22, 0x11, 0x95, 0xa8, 0xe9, 0x1f, 0xa2, 0x5e, 0x41, 0x65, 0x42,
	0x97, 0x74, 0x1e, 0x7c, 0x48, 0xaa, 0x28, 0xe8, 0x43, 0x32, 0x3d, 0x05, 0x23, 0x04, 0x93, 0xfe,
	0x77, 0x96, 0xff, 0x12, 0xea, 0x93, 0xf5, 0x8c, 0xcf, 0x99, 0x33, 0xd3, 0x4b, 0xa9, 0xc4, 0x65,
	0xdf, 0x8a, 0x37, 0xbb, 0x9d, 0x7a, 0x99, 0x4e, 0x44, 0x84, 0xeb, 0xf8, 0xbb, 0x08, 0x65, 0x92,
	0x11, 0xcf, 0xa1, 0x1a, 0x45, 0xc8, 0xd3, 0xa1, 0x24, 0x3d, 0xc4, 0xb0, 0x55, 0x89, 0x86, 0x17,
	0xdc, 0x96, 0xde, 0x27, 0x60, 0x4c, 0xa8, 0x6b, 0x09, 0xa1, 0x27, 0x8c, 0x77, 0x6b, 0x7f, 0x0a,
	0xa5, 0xde, 0xd2, 0xe3, 0x77, 0x38, 0xb7, 0x1d, 0xcf, 0xf2, 0xdf, 0x8b, 0x8f, 0xec, 0x59, 0x41,
	0x9e, 0x9b, 0xaf, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x20, 0xc5, 0x39, 0x5b, 0x81, 0x0f, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SynerexClient is the client API for Synerex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SynerexClient interface {
	RegisterDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error)
	RegisterSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error)
	ProposeDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error)
	ProposeSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error)
	ReserveSupply(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error)
	ReserveDemand(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error)
	SelectSupply(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error)
	SelectDemand(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error)
	Confirm(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Response, error)
	SubscribeDemand(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeDemandClient, error)
	SubscribeSupply(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeSupplyClient, error)
	SubscribeMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (Synerex_SubscribeMbusClient, error)
	SendMsg(ctx context.Context, in *MbusMsg, opts ...grpc.CallOption) (*Response, error)
	CloseMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (*Response, error)
}

type synerexClient struct {
	cc *grpc.ClientConn
}

func NewSynerexClient(cc *grpc.ClientConn) SynerexClient {
	return &synerexClient{cc}
}

func (c *synerexClient) RegisterDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/RegisterDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) RegisterSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/RegisterSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) ProposeDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/ProposeDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) ProposeSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/ProposeSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) ReserveSupply(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/api.Synerex/ReserveSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) ReserveDemand(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/api.Synerex/ReserveDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SelectSupply(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/api.Synerex/SelectSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SelectDemand(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/api.Synerex/SelectDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) Confirm(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) SubscribeDemand(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeDemandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[0], "/api.Synerex/SubscribeDemand", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeDemandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeDemandClient interface {
	Recv() (*Demand, error)
	grpc.ClientStream
}

type synerexSubscribeDemandClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeDemandClient) Recv() (*Demand, error) {
	m := new(Demand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) SubscribeSupply(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Synerex_SubscribeSupplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[1], "/api.Synerex/SubscribeSupply", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeSupplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeSupplyClient interface {
	Recv() (*Supply, error)
	grpc.ClientStream
}

type synerexSubscribeSupplyClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeSupplyClient) Recv() (*Supply, error) {
	m := new(Supply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) SubscribeMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (Synerex_SubscribeMbusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Synerex_serviceDesc.Streams[2], "/api.Synerex/SubscribeMbus", opts...)
	if err != nil {
		return nil, err
	}
	x := &synerexSubscribeMbusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synerex_SubscribeMbusClient interface {
	Recv() (*MbusMsg, error)
	grpc.ClientStream
}

type synerexSubscribeMbusClient struct {
	grpc.ClientStream
}

func (x *synerexSubscribeMbusClient) Recv() (*MbusMsg, error) {
	m := new(MbusMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synerexClient) SendMsg(ctx context.Context, in *MbusMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synerexClient) CloseMbus(ctx context.Context, in *Mbus, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Synerex/CloseMbus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SynerexServer is the server API for Synerex service.
type SynerexServer interface {
	RegisterDemand(context.Context, *Demand) (*Response, error)
	RegisterSupply(context.Context, *Supply) (*Response, error)
	ProposeDemand(context.Context, *Demand) (*Response, error)
	ProposeSupply(context.Context, *Supply) (*Response, error)
	ReserveSupply(context.Context, *Target) (*ConfirmResponse, error)
	ReserveDemand(context.Context, *Target) (*ConfirmResponse, error)
	SelectSupply(context.Context, *Target) (*ConfirmResponse, error)
	SelectDemand(context.Context, *Target) (*ConfirmResponse, error)
	Confirm(context.Context, *Target) (*Response, error)
	SubscribeDemand(*Channel, Synerex_SubscribeDemandServer) error
	SubscribeSupply(*Channel, Synerex_SubscribeSupplyServer) error
	SubscribeMbus(*Mbus, Synerex_SubscribeMbusServer) error
	SendMsg(context.Context, *MbusMsg) (*Response, error)
	CloseMbus(context.Context, *Mbus) (*Response, error)
}

// UnimplementedSynerexServer can be embedded to have forward compatible implementations.
type UnimplementedSynerexServer struct {
}

func (*UnimplementedSynerexServer) RegisterDemand(ctx context.Context, req *Demand) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDemand not implemented")
}
func (*UnimplementedSynerexServer) RegisterSupply(ctx context.Context, req *Supply) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSupply not implemented")
}
func (*UnimplementedSynerexServer) ProposeDemand(ctx context.Context, req *Demand) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeDemand not implemented")
}
func (*UnimplementedSynerexServer) ProposeSupply(ctx context.Context, req *Supply) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeSupply not implemented")
}
func (*UnimplementedSynerexServer) ReserveSupply(ctx context.Context, req *Target) (*ConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveSupply not implemented")
}
func (*UnimplementedSynerexServer) ReserveDemand(ctx context.Context, req *Target) (*ConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveDemand not implemented")
}
func (*UnimplementedSynerexServer) SelectSupply(ctx context.Context, req *Target) (*ConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectSupply not implemented")
}
func (*UnimplementedSynerexServer) SelectDemand(ctx context.Context, req *Target) (*ConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectDemand not implemented")
}
func (*UnimplementedSynerexServer) Confirm(ctx context.Context, req *Target) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (*UnimplementedSynerexServer) SubscribeDemand(req *Channel, srv Synerex_SubscribeDemandServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDemand not implemented")
}
func (*UnimplementedSynerexServer) SubscribeSupply(req *Channel, srv Synerex_SubscribeSupplyServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSupply not implemented")
}
func (*UnimplementedSynerexServer) SubscribeMbus(req *Mbus, srv Synerex_SubscribeMbusServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMbus not implemented")
}
func (*UnimplementedSynerexServer) SendMsg(ctx context.Context, req *MbusMsg) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (*UnimplementedSynerexServer) CloseMbus(ctx context.Context, req *Mbus) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseMbus not implemented")
}

func RegisterSynerexServer(s *grpc.Server, srv SynerexServer) {
	s.RegisterService(&_Synerex_serviceDesc, srv)
}

func _Synerex_RegisterDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Demand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).RegisterDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/RegisterDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).RegisterDemand(ctx, req.(*Demand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_RegisterSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Supply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).RegisterSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/RegisterSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).RegisterSupply(ctx, req.(*Supply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_ProposeDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Demand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).ProposeDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/ProposeDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).ProposeDemand(ctx, req.(*Demand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_ProposeSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Supply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).ProposeSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/ProposeSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).ProposeSupply(ctx, req.(*Supply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_ReserveSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).ReserveSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/ReserveSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).ReserveSupply(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_ReserveDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).ReserveDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/ReserveDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).ReserveDemand(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SelectSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).SelectSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/SelectSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).SelectSupply(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SelectDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).SelectDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/SelectDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).SelectDemand(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).Confirm(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_SubscribeDemand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeDemand(m, &synerexSubscribeDemandServer{stream})
}

type Synerex_SubscribeDemandServer interface {
	Send(*Demand) error
	grpc.ServerStream
}

type synerexSubscribeDemandServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeDemandServer) Send(m *Demand) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_SubscribeSupply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeSupply(m, &synerexSubscribeSupplyServer{stream})
}

type Synerex_SubscribeSupplyServer interface {
	Send(*Supply) error
	grpc.ServerStream
}

type synerexSubscribeSupplyServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeSupplyServer) Send(m *Supply) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_SubscribeMbus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Mbus)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynerexServer).SubscribeMbus(m, &synerexSubscribeMbusServer{stream})
}

type Synerex_SubscribeMbusServer interface {
	Send(*MbusMsg) error
	grpc.ServerStream
}

type synerexSubscribeMbusServer struct {
	grpc.ServerStream
}

func (x *synerexSubscribeMbusServer) Send(m *MbusMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Synerex_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MbusMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).SendMsg(ctx, req.(*MbusMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synerex_CloseMbus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mbus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynerexServer).CloseMbus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Synerex/CloseMbus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynerexServer).CloseMbus(ctx, req.(*Mbus))
	}
	return interceptor(ctx, in, info, handler)
}

var _Synerex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Synerex",
	HandlerType: (*SynerexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDemand",
			Handler:    _Synerex_RegisterDemand_Handler,
		},
		{
			MethodName: "RegisterSupply",
			Handler:    _Synerex_RegisterSupply_Handler,
		},
		{
			MethodName: "ProposeDemand",
			Handler:    _Synerex_ProposeDemand_Handler,
		},
		{
			MethodName: "ProposeSupply",
			Handler:    _Synerex_ProposeSupply_Handler,
		},
		{
			MethodName: "ReserveSupply",
			Handler:    _Synerex_ReserveSupply_Handler,
		},
		{
			MethodName: "ReserveDemand",
			Handler:    _Synerex_ReserveDemand_Handler,
		},
		{
			MethodName: "SelectSupply",
			Handler:    _Synerex_SelectSupply_Handler,
		},
		{
			MethodName: "SelectDemand",
			Handler:    _Synerex_SelectDemand_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _Synerex_Confirm_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _Synerex_SendMsg_Handler,
		},
		{
			MethodName: "CloseMbus",
			Handler:    _Synerex_CloseMbus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeDemand",
			Handler:       _Synerex_SubscribeDemand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeSupply",
			Handler:       _Synerex_SubscribeSupply_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMbus",
			Handler:       _Synerex_SubscribeMbus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "synerex.proto",
}
